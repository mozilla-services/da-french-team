Kinto.js 1.0 released
#####################

:lang: en
:url: kinto-js-1-0-released
:slug: kinto-js-1-0-released
:date: 2015-10-27
:summary: After months of development, we're proud to announce the release of Kinto.js 1.0.0 stable.

Kinto.js_ is an offline-first JavaScript client leveraging the `Kinto API <https://kinto.readthedocs.io/>`_ for data synchronization. In a world where connectivity isn't always guaranteed, local persistence in the browser has become an `identified priority <http://offlinefirst.org/>`_ for Web applications, especially on mobile.

The basic principle is simple; save your data locally, assuming there's no network connectivity. Then as soon as it's available, retrieve remote changes and push your local data to a remote server.

.. code-block:: javascript

    const kinto = new Kinto({remote: "https://demo.kinto-storage.org/v1/"});
    const tasks = kinto.collection("tasks");

    tasks.create({label: "Test kinto.js", done: false})
      .then(_ => tasks.sync())
      .then(res => {
        if (res.ok) {
          alert("Data have been synchronized!");
        }
      });

Local persistence in the browser is achieved using IndexedDB_, and we've tried hard to hide its inherent low-level usage complexity — mainly due to its fully asynchronous nature — through a simpler yet convenient Promises_ based API.

Kinto.js provides basic local CRUD operations for `creating <https://kintojs.readthedocs.io/en/latest/api/#creating-a-record>`_, `updating <https://kintojs.readthedocs.io/en/latest/api/#updating-a-record>`_, `deleting <https://kintojs.readthedocs.io/en/latest/api/#deleting-records>`_, `retrieving <https://kintojs.readthedocs.io/en/latest/api/#retrieving-a-single-record>`_ and `listing <https://kintojs.readthedocs.io/en/latest/api/#listing-records>`_ records from a local collection. Each time you want to reflect its state to a remote server, you only ever have to `call the sync() method <https://kintojs.readthedocs.io/en/latest/api/#fetching-and-publishing-changes>`_!

We've set up a `simple demo application <https://kinto.github.io/kinto.js/>`_ using a public Mozilla test server instance, so you can check how it behaves by yourself if you're interested. The source code of this app is `available on Github <https://github.com/Kinto/kinto.js/blob/66ef077796a8e4a8b0d9a95389a61ea57cbbfde3/demo/demo.js>`_, and is also the base use case for the `Kinto.js tutorial <http://kintojs.readthedocs.io/en/latest/tutorial/>`_ you should probably take if you want to get your feet wet.

.. note::

   Please note that this public Kinto test server instance is flushed every morning at 7AM UTC, so don't rely on it for production use ;)

Synchronizing and reconciling data
----------------------------------

Synchronizing local and remote data is a tough topic, and conflicts may occur quite easily if things are changing often from different sources (think multiple devices updating a same server); Kinto.js supports three distinct *synchronization strategies* to handle such a situation:

- The server is authoritative: all conflicting records are overriden locally by their version from the server;
- The client is authoritative: all conflicting records are resolved using their local versions, and force-pushed to the server;
- No party is authoritative: the synchronization flow is halted, and all conflicting records are explicitely exposed, so developers can then decide how they want resolve each of them individually.

You can read more about `conflict resolution <https://kintojs.readthedocs.io/en/latest/api/#resolving-conflicts-manually>`_ and `sychronization strategies <http://kintojs.readthedocs.io/en/latest/api/#synchronization-strategies>`_ in the dedicated sections of the project documentation.

The diagram flow below describes pretty much accurately what's happening under the hood when ``sync()`` is called:

.. image:: {filename}/images/kintojs-sync-flow.png
   :alt: Kinto.js synchronization flow

A case for encryption
---------------------

Remote data storage is certainly a topic raising concerns when it comes to security and privacy.

To help addressing these issues, Kinto.js exposes a `Remote Transformers API <http://kintojs.readthedocs.io/en/latest/api/#transformers>`_, which allow processing records before they're sent to the server and after they've been retrieved from it.

This is a perfect hook for supporting end-to-end encryption, which `we already wrote about earlier <{filename}/2015.09.kinto-encryption-example.rst>`_.

Getting started
---------------

We already mentioned the `Kinto.js tutorial <http://kintojs.readthedocs.io/en/latest/tutorial/>`_, but there's more; we've created a rather opinionated  `Kinto.js + React boilerplate <https://github.com/Kinto/kinto-react-boilerplate>`_, so you can bootstrap your next offline-first Web application in no time ;)

Current limitations
-------------------

We've listed Kinto.js current limitations — the ones we're aware of — in a `dedicated section of the documentation <http://kintojs.readthedocs.io/en/latest/limitations/>`_.

Sure, that's a bunch of work remaining, and you're obviously `invited to contribute <http://kintojs.readthedocs.io/en/latest/hacking/>`_ if you want to help!

The future of Kinto.js
----------------------

Of course 1.0 is a very first step towards a broader goal; foremost, we absolutely want to support bulk updates by taking advantage of IndexedDB transactions, for performance and consistency purposes.

So stay tuned for next upcoming releases, and feel free to provide feedback on the `project mailing-list <https://mail.mozilla.org/listinfo/kinto>`_ or by `filing an issue on Github <https://github.com/Kinto/kinto.js/issues/new>`_ :)

Update
------

We're not even done polishing this blog post and the `1.1 version is already there <https://github.com/Kinto/kinto.js/releases/tag/v1.1.0>`_! Take it the easy way, that means the project is on steroids ;)

.. _IndexedDB: https://www.w3.org/TR/IndexedDB/
.. _Kinto.js: https://kintojs.readthedocs.io/
.. _Promises: https://www.promisejs.org/
